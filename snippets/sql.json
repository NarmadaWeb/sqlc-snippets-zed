{
  "sqlc: Select One": {
    "prefix": "sqlcone",
    "body": [
      "-- name: ${1:GetUser} :one",
      "SELECT * FROM ${2:users}",
      "WHERE id = $1;"
    ],
    "description": "Generates a sqlc query to fetch a single row from a table, typically by its ID."
  },

  "sqlc: Select Many": {
    "prefix": "sqlcmany",
    "body": [
      "-- name: ${1:ListUsers} :many",
      "SELECT * FROM ${2:users}",
      "WHERE created_at > $1",
      "ORDER BY ${3:created_at} DESC",
      "LIMIT $2 OFFSET $3;"
    ],
    "description": "Generates a sqlc query for paginated results, fetching multiple rows using LIMIT and OFFSET."
  },

  "sqlc: Insert Returning": {
    "prefix": "sqlcinsert",
    "body": [
      "-- name: ${1:CreateUser} :one",
      "INSERT INTO ${2:users} (",
      "\t${3:name}, ${4:email}, ${5:password_hash}",
      ") VALUES (",
      "\t$1, $2, $3",
      ")",
      "RETURNING id, created_at;"
    ],
    "description": "Generates a sqlc query to insert a new row and return specified columns, such as the ID."
  },

  "sqlc: Update Exec": {
    "prefix": "sqlcupdate",
    "body": [
      "-- name: ${1:UpdateUser} :exec",
      "UPDATE ${2:users}",
      "SET name = $1, email = $2, updated_at = NOW()",
      "WHERE id = $3;"
    ],
    "description": "Generates a sqlc query (:exec) for updating a record in a table without returning any rows."
  },

  "sqlc: Delete Exec": {
    "prefix": "sqlcdelete",
    "body": [
      "-- name: ${1:DeleteUser} :exec",
      "DELETE FROM ${2:users}",
      "WHERE id = $1;"
    ],
    "description": "Generates a sqlc query (:exec) to delete one or more records from a table."
  },

  "sqlc: Batch Insert": {
    "prefix": "sqlcbatch",
    "body": [
      "-- name: ${1:BulkCreateUsers} :batchexec",
      "INSERT INTO ${2:users} (name, email)",
      "VALUES (",
      "\t$1, $2",
      ");"
    ],
    "description": "Generates a sqlc query (:batchexec) for efficiently inserting multiple rows in a single operation."
  },

  "sqlc: Join with Aggregation": {
    "prefix": "sqlcjoin",
    "body": [
      "-- name: ${1:UserWithOrders} :many",
      "SELECT",
      "\tu.id,",
      "\tu.name,",
      "\tCOUNT(o.id) AS order_count,",
      "\tSUM(o.amount) AS total_amount",
      "FROM ${2:users} u",
      "LEFT JOIN ${3:orders} o ON u.id = o.user_id",
      "GROUP BY u.id;"
    ],
    "description": "Generates a sqlc query that joins tables and uses aggregate functions like COUNT() and SUM()."
  },

  "sqlc: JSONB Query": {
    "prefix": "sqlcjson",
    "body": [
      "-- name: ${1:SearchMetadata} :many",
      "SELECT * FROM ${2:users}",
      "WHERE metadata @> $1::jsonb;"
    ],
    "description": "Generates a sqlc query to find rows where a JSONB column contains a specified JSON object."
  },

  "sqlc: Array Contains": {
    "prefix": "sqlcarray",
    "body": [
      "-- name: ${1:FindByTags} :many",
      "SELECT * FROM ${2:posts}",
      "WHERE $1::text = ANY(tags);"
    ],
    "description": "Generates a sqlc query to find rows where a text array column contains a specific element."
  },

  "sqlc: Full Text Search": {
    "prefix": "sqlcfts",
    "body": [
      "-- name: ${1:SearchContent} :many",
      "SELECT * FROM ${2:documents}",
      "WHERE search_vector @@ websearch_to_tsquery('english', $1);"
    ],
    "description": "Generates a sqlc query to perform a full-text search on a tsvector column."
  },

  "sqlc: Transaction": {
    "prefix": "sqlctx",
    "body": [
      "-- name: ${1:TransferFunds} :exec",
      "BEGIN;",
      "",
      "UPDATE accounts",
      "SET balance = balance - $1",
      "WHERE id = $2;",
      "",
      "UPDATE accounts",
      "SET balance = balance + $1",
      "WHERE id = $3;",
      "",
      "INSERT INTO transfers (from_account, to_account, amount)",
      "VALUES ($2, $3, $1);",
      "",
      "COMMIT;"
    ],
    "description": "An example SQL transaction block. Note: sqlc handles transactions in Go code; this is for raw SQL testing."
  },

  "PG: Create Table": {
    "prefix": "pgtbl",
    "body": [
      "CREATE TABLE ${1:table_name} (",
      "\tid ${2|uuid,serial,bigserial|} PRIMARY KEY ${3|DEFAULT uuid_generate_v4(),DEFAULT gen_random_uuid(),|},",
      "\tcreated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),",
      "\tupdated_at TIMESTAMPTZ,",
      "\t${4:column} ${5|text,varchar(255),int,bigint,bool,jsonb,timestamptz|} ${6|NOT NULL,NULL|},$0",
      ");",
      "",
      "COMMENT ON TABLE ${1:table_name} IS '${7:Table description}';"
    ],
    "description": "Creates a PostgreSQL table with common columns, such as a primary key and audit timestamps."
  },

  "PG: Create Index": {
    "prefix": "pgidx",
    "body": "CREATE INDEX ${1:concurrently|} ${2:idx_name} ON ${3:table_name} (${4:column});",
    "description": "Creates a standard or concurrent index on a table column to improve query performance."
  },

  "PG: Create Enum": {
    "prefix": "pgenum",
    "body": [
      "CREATE TYPE ${1:status} AS ENUM (",
      "\t'${2:active}',",
      "\t'${3:pending}',",
      "\t'${4:deleted}'",
      ");"
    ],
    "description": "Creates a custom enumeration (ENUM) type in PostgreSQL for a predefined set of values."
  },

  "PG: Create Function": {
    "prefix": "pgfunc",
    "body": [
      "CREATE OR REPLACE FUNCTION ${1:function_name}(${2:param} ${3:type})",
      "RETURNS ${4:return_type} AS $$",
      "BEGIN",
      "\t${0:-- function logic}",
      "END;",
      "$$ LANGUAGE plpgsql;"
    ],
    "description": "Creates a reusable server-side function using the PL/pgSQL language."
  },

  "PG: Update Trigger": {
    "prefix": "pgtrigger",
    "body": [
      "CREATE OR REPLACE FUNCTION update_modified()",
      "RETURNS TRIGGER AS $$",
      "BEGIN",
      "\tNEW.updated_at = NOW();",
      "\tRETURN NEW;",
      "END;",
      "$$ LANGUAGE plpgsql;",
      "",
      "CREATE TRIGGER trg_${1:table_name}_update",
      "\tBEFORE UPDATE ON ${1:table_name}",
      "\tFOR EACH ROW",
      "\tEXECUTE FUNCTION update_modified();"
    ],
    "description": "Creates a function and trigger to automatically update an `updated_at` timestamp column on row updates."
  },

  "PG: CTE (With Clause)": {
    "prefix": "pgcte",
    "body": [
      "WITH ${1:cte_name} AS (",
      "\tSELECT ${2:columns}",
      "\tFROM ${3:table}",
      "\tWHERE ${4:condition}",
      ")",
      "SELECT * FROM ${1:cte_name};"
    ],
    "description": "Creates a Common Table Expression (CTE) using the WITH clause to simplify complex queries."
  },

  "PG: JSONB Column": {
    "prefix": "pgjsonb",
    "body": "${1:metadata} JSONB NOT NULL DEFAULT '{}'::jsonb",
    "description": "Defines a JSONB column with a non-null constraint and a default value of an empty JSON object."
  },

  "PG: Array Column": {
    "prefix": "pgarray",
    "body": "${1:tags} TEXT[] NOT NULL DEFAULT '{}'",
    "description": "Defines a text array column with a non-null constraint and a default value of an empty array."
  },

  "PG: Full-Text Search Setup": {
    "prefix": "pgfts",
    "body": [
      "ALTER TABLE ${1:table_name} ADD COLUMN ${2:search_vector} TSVECTOR;",
      "",
      "CREATE FUNCTION ${1:table_name}_search_update() RETURNS trigger AS $$",
      "BEGIN",
      "\tNEW.${2:search_vector} = ",
      "\t\tto_tsvector('english', ",
      "\t\t\tCOALESCE(NEW.${3:title}, '') || ' ' || ",
      "\t\t\tCOALESCE(NEW.${4:content}, '')",
      "\t\t);",
      "\tRETURN NEW;",
      "END;",
      "$$ LANGUAGE plpgsql;",
      "",
      "CREATE TRIGGER ${1:table_name}_search_trigger",
      "\tBEFORE INSERT OR UPDATE ON ${1:table_name}",
      "\tFOR EACH ROW",
      "\tEXECUTE FUNCTION ${1:table_name}_search_update();",
      "",
      "CREATE INDEX idx_${1:table_name}_search ON ${1:table_name} USING GIN (${2:search_vector});"
    ],
    "description": "Complete setup for Full-Text Search, including a tsvector column, trigger function, and GIN index."
  },

  "PG: Generate UUID": {
    "prefix": "pguuid",
    "body": "gen_random_uuid()",
    "description": "Generates a version 4 UUID using a function from the `pgcrypto` extension."
  },

  "sqlc: Model Comment": {
    "prefix": "sqlcmodel",
    "body": [
      "COMMENT ON TABLE ${1:table_name} IS '${2:Description for sqlc model}';",
      "COMMENT ON COLUMN ${1:table_name}.id IS 'Primary key';",
      "COMMENT ON COLUMN ${1:table_name}.created_at IS 'Creation timestamp';"
    ],
    "description": "Adds comments to a table and its columns, which sqlc uses for documentation in the generated Go models."
  },

  "Explain Analyze": {
    "prefix": "pgexplain",
    "body": "EXPLAIN (ANALYZE, BUFFERS) ${0:query};",
    "description": "Runs a query and displays the actual execution plan and its performance statistics."
  },

  "Current Timestamp": {
    "prefix": "pgnow",
    "body": "NOW()",
    "description": "Gets the current timestamp with time zone (equivalent to CURRENT_TIMESTAMP)."
  },

  "Interval": {
    "prefix": "pginterval",
    "body": "INTERVAL '${1:1} ${2|day,week,month,year|}'",
    "description": "Creates a time interval for date/time arithmetic, e.g., `NOW() - INTERVAL '1 day'`."
  },

  "JSONB Build": {
    "prefix": "pgjsonbuild",
    "body": "jsonb_build_object(${1:'key', $2})",
    "description": "Builds a JSONB object from a dynamic list of key-value pairs."
  },

  "Array Aggregation": {
    "prefix": "pgarrayagg",
    "body": "ARRAY_AGG(${1:column})",
    "description": "Aggregates values from multiple rows into a single PostgreSQL array using ARRAY_AGG()."
  },

  "sqlc v2: Named Parameters": {
    "prefix": "sqlcv2",
    "body": [
      "/* name: ${1:UpdateUser} :exec */",
      "UPDATE users",
      "SET",
      "\tname = @name,",
      "\temail = @email,",
      "\tupdated_at = NOW()",
      "WHERE id = @id;"
    ],
    "description": "Generates a sqlc v2 query with named parameters (@param) for better readability."
  },

  "sqlc v2: Batch Many": {
    "prefix": "sqlcv2batch",
    "body": [
      "/* name: ${1:BulkUpdateStatus} :batchmany */",
      "UPDATE users",
      "SET status = @status",
      "WHERE id = @id",
      "RETURNING *;"
    ],
    "description": "Generates a sqlc v2 batch operation (:batchmany) that returns data from each affected row."
  },

  "sqlc v2: Custom Types": {
    "prefix": "sqlcv2type",
    "body": [
      "/* name: ${1:CreateUser} :one */",
      "INSERT INTO users (name, preferences)",
      "VALUES (",
      "\t@name,",
      "\t@preferences::jsonb",
      ")",
      "RETURNING *;"
    ],
    "description": "Generates a sqlc v2 query demonstrating parameter casting to custom or non-standard types like JSONB."
  },

  "PG: Create Extension": {
    "prefix": "pgext",
    "body": "CREATE EXTENSION IF NOT EXISTS \"${1|uuid-ossp,pgcrypto,pg_trgm|}\";",
    "description": "Creates a PostgreSQL extension if it doesn't already exist to enable additional functionality."
  },

  "PG: Add Column": {
    "prefix": "pgaddcol",
    "body": "ALTER TABLE ${1:table_name} ADD COLUMN ${2:column_name} ${3:data_type};",
    "description": "Adds a new column with a specific data type to an existing table."
  },

  "PG: Drop Column": {
    "prefix": "pgdropcol",
    "body": "ALTER TABLE ${1:table_name} DROP COLUMN ${2:column_name};",
    "description": "Drops a column from an existing table. This is a destructive and often irreversible action."
  },

  "PG: Row Level Security": {
    "prefix": "pgrls",
    "body": [
      "ALTER TABLE ${1:table_name} ENABLE ROW LEVEL SECURITY;",
      "",
      "CREATE POLICY ${2:policy_name} ON ${1:table_name}",
      "\tFOR SELECT",
      "\tUSING (${3:user_id} = current_user_id());"
    ],
    "description": "Enables Row Level Security (RLS) on a table and creates a basic policy for multi-tenant access."
  },

  "PG: Grant Permissions": {
    "prefix": "pggrant",
    "body": "GRANT ${1|SELECT,INSERT,UPDATE,DELETE|} ON ${2:table_name} TO ${3:role_name};",
    "description": "Grants specific SQL permissions (SELECT, INSERT, etc.) on a table to a database role."
  },

  "PG: Index on Expression": {
    "prefix": "pgexpridx",
    "body": "CREATE INDEX ${1:idx_name} ON ${2:table_name} (LOWER(${3:column}));",
    "description": "Creates an index based on an expression or function, such as indexing a column in lowercase."
  },

  "PG: Partial Index": {
    "prefix": "pgpartialidx",
    "body": "CREATE INDEX ${1:idx_name} ON ${2:table_name} (${3:column}) WHERE ${4:condition};",
    "description": "Creates a partial index that only covers a subset of rows, useful for specific queries."
  },

  "PG: Begin Transaction": {
    "prefix": "pgbegin",
    "body": "BEGIN;\n\n${0:-- test queries}\n\nROLLBACK;",
    "description": "Creates a safe transaction block for testing queries, which is set to ROLLBACK by default."
  },

  "PG: Explain Analyze": {
    "prefix": "pgexplain",
    "body": "EXPLAIN (ANALYZE, BUFFERS, VERBOSE) ${0:query};",
    "description": "Displays a detailed query analysis, including buffer usage and verbose output."
  }
}
